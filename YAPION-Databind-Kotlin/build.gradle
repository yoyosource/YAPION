import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.6.10'
    id 'application'
    id 'com.github.johnrengelman.shadow'

    id 'org.frgaal.compiler'
}

group 'YAPION'
version 'SNAPSHOT'

ext {
    databindName = "Kotlin"
    packName = "kotlin"

    uberJarName = "${group}-Databind-${databindName}-${version}-all.jar"
    jarName = "${group}-Databind-${databindName}-${version}.jar"
    libs = "${buildDir}/libs"

    groupName = "${group}"
}

repositories {
    mavenCentral()
}

targetCompatibility = '1.8'
sourceCompatibility = '15'

compileJava.options.encoding = 'UTF-8'
compileJava {
    options.compilerArgs << '-Xlint:deprecation' << '--enable-preview'
}

compileTestJava.options.encoding = 'UTF-8'
compileTestJava {
    options.compilerArgs << '-Xlint:deprecation' << '--enable-preview'
}

mainClassName = ''

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.22'
    testCompileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'

    compileOnly "org.jetbrains.kotlin:kotlin-stdlib"

    compileOnly project(":YAPION-Hierarchy")
    compileOnly project(":YAPION-Serializer")
}

task buildProject {
    description 'Build this repo'
    group "Build"

    doLast {
        if ("${buildDir}" == null) {
            return
        }
        delete fileTree("${libs}").matching {
            exclude("${uberJarName}")
        }
        file(libs + "/" + uberJarName).renameTo(file(libs + "/" + jarName))

        long size = file(libs + "/" + jarName).size()
        println("Size: " + (size / 1024.0) + "kB")
    }
}
build.finalizedBy(buildProject)
assemble.finalizedBy(buildProject)

task compressClassFiles {
    description 'Compress Class Files'
    group "build"
    inputs.dir "${buildDir}/classes/kotlin/main/yapion/serializing/serializer/"
    outputs.files("${buildDir}/resources/main/yapion/serializing/${packName}.pack", "${buildDir}/resources/main/yapion/serializing/${packName}.pack.meta")

    doLast {
        if (file("${buildDir}/classes/kotlin/main/yapion/serializing/serializer/").exists()) {
            def command
            if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
                command = "java -cp ${buildDir}/classes/kotlin/main/:${configurations.compileClasspath.join(":")}  yapion/serializing/serializer/${databindName}PackerKt"
            } else {
                command = "java -cp ${buildDir}/classes/kotlin/main/;${configurations.compileClasspath.join(";")}  yapion/serializing/serializer/${databindName}PackerKt"
            }
            String[] strings = shell(command)
            if (strings[2] == '0') {
                print(strings[0])
            } else {
                print(strings[0])
                print(strings[1])
            }
            file("${buildDir}/classes/kotlin/main/yapion/serializing/${packName}.pack").renameTo(file("${buildDir}/resources/main/yapion/serializing/${packName}.pack"))
            file("${buildDir}/classes/kotlin/main/yapion/serializing/${packName}.pack.meta").renameTo(file("${buildDir}/resources/main/yapion/serializing/${packName}.pack.meta"))
        }
    }
}
inspectClassesForKotlinIC.finalizedBy(compressClassFiles)

shadowJar {
    manifest {
        attributes(
                'Main-Class': mainClassName
        )
    }
    exclude 'yapion/serializing/serializer/'
}
/**
 * Executes a shell command and returns the stdout result.
 *
 * @param command the command to execute (cannot contain pipes)
 * @return the trimmed result from stdout, stderr and the exit value
 */
def shell(String command) {
    def proc
    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
        proc = ['bash', '-c', command].execute()
    } else {
        proc = ["cmd", "/c", command].execute()
    }
    def out = new StringBuilder()
    def err = new StringBuilder()
    proc.waitForProcessOutput(out, err)
    return [out.toString().trim(), err.toString().trim(), proc.exitValue()]
}