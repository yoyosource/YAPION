import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.6.10'
    id 'application'
    id 'com.github.johnrengelman.shadow'

    id 'org.frgaal.compiler'
}

group 'YAPION'
version 'SNAPSHOT'

ext {
    uberJarName = "${group}-Kotlin-${version}-all.jar"
    jarName = "${group}-Kotlin-${version}.jar"
    libs = "${buildDir}/libs"

    groupName = "${group}"
}

repositories {
    mavenCentral()
}

targetCompatibility = '1.8'
sourceCompatibility = '15'

compileJava.options.encoding = 'UTF-8'
compileJava {
    options.compilerArgs << '-Xlint:deprecation' << '--enable-preview'
}

compileTestJava.options.encoding = 'UTF-8'
compileTestJava {
    options.compilerArgs << '-Xlint:deprecation' << '--enable-preview'
}

mainClassName = ''

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.22'
    testCompileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'

    if (false) {
        compileOnly project(":YAPION-Hierarchy")
        compileOnly project(":YAPION-Parser")
        compileOnly project(":YAPION-Path")
        compileOnly project(":YAPION-Serializer")

        compileOnly "org.jetbrains.kotlin:kotlin-stdlib"
    } else {
        implementation project(":YAPION-Hierarchy")
        implementation project(":YAPION-Parser")
        implementation project(":YAPION-Path")
        implementation project(":YAPION-Serializer")

        implementation "org.jetbrains.kotlin:kotlin-stdlib"
    }

    implementation 'org.slf4j:slf4j-api:2.0.0-alpha1'
}

task buildProject {
    description 'Build this repo'
    group "Build"

    doLast {
        if ("${buildDir}" == null) {
            return
        }
        delete fileTree("${libs}").matching {
            exclude("${uberJarName}")
        }
        file(libs + "/" + uberJarName).renameTo(file(libs + "/" + jarName))

        long size = file(libs + "/" + jarName).size()
        println("Size: " + (size / 1024.0) + "kB")
    }
}
build.finalizedBy(buildProject)
assemble.finalizedBy(buildProject)

shadowJar {
    manifest {
        attributes(
                'Main-Class': mainClassName
        )
    }
}

/**
 * Executes a shell command and returns the stdout result.
 *
 * @param command the command to execute (cannot contain pipes)
 * @return the trimmed result from stdout, stderr and the exit value
 */
def shell(String command) {
    def proc
    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
        proc = ['bash', '-c', command].execute()
    } else {
        proc = ["cmd", "/c", command].execute()
    }
    def out = new StringBuilder()
    def err = new StringBuilder()
    proc.waitForProcessOutput(out, err)
    return [out.toString().trim(), err.toString().trim(), proc.exitValue()]
}