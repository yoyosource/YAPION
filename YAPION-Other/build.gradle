plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow'

    id 'org.frgaal.compiler'
}

group 'YAPION'
version 'SNAPSHOT'

ext {
    uberJarName = "${group}-Other-${version}-all.jar"
    jarName = "${group}-Other-${version}.jar"
    libs = "${buildDir}/libs"

    groupName = "${group}"
}

repositories {
    mavenCentral()
}

targetCompatibility = '1.8'
sourceCompatibility = '15'

compileJava.options.encoding = 'UTF-8'
compileJava {
    options.compilerArgs << '-Xlint:deprecation' << '--enable-preview'
}

compileTestJava.options.encoding = 'UTF-8'
compileTestJava {
    options.compilerArgs << '-Xlint:deprecation' << '--enable-preview'
}

mainClassName = ''

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.22'
    testCompileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'

    compileOnly 'org.atteo.classindex:classindex:3.11'
    testCompileOnly 'org.atteo.classindex:classindex:3.11'
    annotationProcessor 'org.atteo.classindex:classindex:3.11'
    testAnnotationProcessor 'org.atteo.classindex:classindex:3.11'

    compileOnly project(":YAPION-Hierarchy")
    compileOnly project(":YAPION-Parser")
    compileOnly project(":YAPION-Serializer")

    implementation 'org.slf4j:slf4j-api:2.0.0-alpha1'
    implementation 'org.ow2.asm:asm:9.3'
}

task buildProject {
    description 'Build this repo'
    group "Build"

    doLast {
        if ("${buildDir}" == null) {
            return
        }
        delete fileTree("${libs}").matching {
            exclude("${uberJarName}")
        }
        file(libs + "/" + uberJarName).renameTo(file(libs + "/" + jarName))

        long size = file(libs + "/" + jarName).size()
        println("Size: " + (size / 1024.0) + "kB")
    }
}
build.finalizedBy(buildProject)
assemble.finalizedBy(buildProject)

processResources {
    from(rootDir) {
        include(['LICENSE'])
        into("")

        includeEmptyDirs = false
    }

    doLast {
        File from = new File("${buildDir}/classes/java/main/META-INF/annotations/yapion.annotations.api.ProcessorImplementation")
        File to = new File("${buildDir}/classes/java/main/META-INF/services/javax.annotation.processing.Processor")
        to.delete()
        to.parentFile.mkdirs()
        to.createNewFile()
        for (String s : from.readLines()) {
            to.append(s + "\n")
        }
    }
}

shadowJar {
    manifest {
        attributes(
                'Main-Class': mainClassName
        )
    }
    exclude 'META-INF/annotations/**'
}
